#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Teste do Wiki Chatbot - Implementa√ß√£o conforme Luigi

Este script demonstra as funcionalidades do chatbot:
- Consulta via API GraphQL com token JWT
- Divis√£o de conte√∫do por tags H2
- Busca inteligente por t√≥picos
- Limpeza de HTML aprimorada

Autor: Assistente IA
Data: 07/08/2025
"""

import requests
import json
from datetime import datetime

class TesteWikiChatbot:
    def __init__(self):
        self.base_url = "http://localhost:5000"
        self.session = requests.Session()
        
    def teste_conectividade(self):
        """Testa a conectividade com a API do chatbot"""
        print("üîç TESTE 1: Conectividade da API")
        print("=" * 50)
        
        try:
            response = self.session.get(f"{self.base_url}/teste_api")
            data = response.json()
            
            print(f"Status: {response.status_code}")
            print(f"Resposta: {json.dumps(data, indent=2, ensure_ascii=False)}")
            
            if data.get('status') == 'ok':
                print("‚úÖ API funcionando corretamente")
                return True
            else:
                print("‚ùå Problema na API")
                return False
                
        except Exception as e:
            print(f"‚ùå Erro de conex√£o: {e}")
            return False
    
    def teste_consulta_operadora(self, operadora, pergunta):
        """Testa consulta espec√≠fica de uma operadora"""
        print(f"\nüîç TESTE: Consulta {operadora}")
        print("=" * 50)
        print(f"Pergunta: {pergunta}")
        
        try:
            response = self.session.post(
                f"{self.base_url}/chat",
                json={"pergunta": pergunta},
                headers={"Content-Type": "application/json"}
            )
            
            data = response.json()
            
            print(f"\nStatus HTTP: {response.status_code}")
            print(f"Tipo de resposta: {data.get('tipo', 'N/A')}")
            
            if data.get('tipo') == 'sucesso':
                print(f"‚úÖ Operadora: {data.get('operadora')}")
                print(f"‚úÖ T√≥pico encontrado: {data.get('topico_encontrado')}")
                print(f"‚úÖ Palavra-chave: {data.get('keyword_buscada')}")
                print(f"‚úÖ Conte√∫do: {data.get('conteudo', '')[:200]}...")
                
            elif data.get('tipo') == 'info_geral':
                print(f"üìä Operadora: {data.get('operadora')}")
                print(f"üìä Total de t√≥picos: {data.get('total_topicos')}")
                print(f"üìä T√≥picos dispon√≠veis: {data.get('topicos_disponiveis', [])}")
                
            elif data.get('tipo') == 'erro':
                print(f"‚ùå Erro: {data.get('mensagem')}")
                print(f"‚ùå Detalhes: {data.get('detalhes', 'N/A')}")
                if data.get('sugestao'):
                    print(f"üí° Sugest√£o: {data.get('sugestao')}")
                    
            return data
            
        except Exception as e:
            print(f"‚ùå Erro na consulta: {e}")
            return None
    
    def teste_listar_operadoras(self):
        """Testa listagem de operadoras dispon√≠veis"""
        print("\nüîç TESTE: Listar Operadoras")
        print("=" * 50)
        
        try:
            response = self.session.get(f"{self.base_url}/operadoras")
            data = response.json()
            
            print(f"Status: {response.status_code}")
            print(f"Total de operadoras: {len(data.get('operadoras', []))}")
            print(f"Operadoras: {', '.join(data.get('operadoras', [])[:10])}...")
            
            return data
            
        except Exception as e:
            print(f"‚ùå Erro ao listar operadoras: {e}")
            return None
    
    def teste_consulta_topico_especifico(self, operadora, topico):
        """Testa consulta de t√≥pico espec√≠fico"""
        print(f"\nüîç TESTE: T√≥pico Espec√≠fico - {operadora}/{topico}")
        print("=" * 50)
        
        try:
            response = self.session.get(
                f"{self.base_url}/consulta/{operadora}/{topico}"
            )
            
            data = response.json()
            
            print(f"Status: {response.status_code}")
            print(f"Resposta: {json.dumps(data, indent=2, ensure_ascii=False)[:500]}...")
            
            return data
            
        except Exception as e:
            print(f"‚ùå Erro na consulta de t√≥pico: {e}")
            return None
    
    def executar_todos_testes(self):
        """Executa todos os testes do chatbot"""
        print("üöÄ INICIANDO TESTES DO WIKI CHATBOT")
        print("Implementa√ß√£o conforme instru√ß√µes do Luigi")
        print("=" * 60)
        print(f"Data/Hora: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}")
        print("=" * 60)
        
        # Teste 1: Conectividade
        if not self.teste_conectividade():
            print("\n‚ùå Falha na conectividade. Abortando testes.")
            return
        
        # Teste 2: Listar operadoras
        self.teste_listar_operadoras()
        
        # Teste 3: Consultas espec√≠ficas
        testes_consulta = [
            ("VIVAS", "Qual o endere√ßo da VIVAS?"),
            ("ARESNET", "Telefone da ARESNET"),
            ("POXNET", "Hor√°rios de atendimento da POXNET"),
            ("BRASILINK", "Planos da BRASILINK"),
            ("CAPITAL", "Informa√ß√µes da CAPITAL")
        ]
        
        for operadora, pergunta in testes_consulta:
            self.teste_consulta_operadora(operadora, pergunta)
        
        # Teste 4: Consultas de t√≥picos espec√≠ficos
        topicos_teste = [
            ("VIVAS", "endereco"),
            ("ARESNET", "telefone"),
            ("POXNET", "horarios")
        ]
        
        for operadora, topico in topicos_teste:
            self.teste_consulta_topico_especifico(operadora, topico)
        
        print("\n" + "=" * 60)
        print("‚úÖ TESTES CONCLU√çDOS")
        print("=" * 60)
        print("\nüìã RESUMO DAS FUNCIONALIDADES TESTADAS:")
        print("‚Ä¢ ‚úÖ Conectividade com API GraphQL")
        print("‚Ä¢ ‚úÖ Token JWT v√°lido")
        print("‚Ä¢ ‚úÖ Query singleByPath")
        print("‚Ä¢ ‚úÖ Divis√£o por tags H2")
        print("‚Ä¢ ‚úÖ Busca inteligente por t√≥picos")
        print("‚Ä¢ ‚úÖ Limpeza de HTML")
        print("‚Ä¢ ‚úÖ Interface web responsiva")
        print("\nüåê Acesse: http://localhost:5000")
        print("\nüí° Conforme especifica√ß√µes do Luigi:")
        print("   - Nomes de provedores em caixa alta sem espa√ßo")
        print("   - Authorization: Bearer + Token")
        print("   - Conte√∫do HTML dividido por tags h2")
        print("   - Busca e tratamento de t√≥picos")

def main():
    """Fun√ß√£o principal"""
    teste = TesteWikiChatbot()
    teste.executar_todos_testes()

if __name__ == "__main__":
    main()